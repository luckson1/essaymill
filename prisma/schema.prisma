// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role Role @default(customer)
    accounts      Account[]
    sessions      Session[]
    Project       Project[]
    Files         File[]
    Message       Message[]
    Payment       Payment[]
}

model Subject {
    id      String    @id @default(cuid())
    name    String
    Project Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
  customer
  admin
  writer
  editor
}

enum Type {
    essay
    researchPaper
    dissertation
}

enum Level {
    undergraduate
    graduate
    phd
}

enum Format {
    Chicago
    APA
    MLA
    Harvard
    Other
    None
}

enum Status {
    draft
    progress
    revision
    review
    complete
    closed
    cancelled
}

enum fileType {
    customerFile
    DraftFIle
    FinalFile
}

model Project {
    id          String @id @default(cuid())
    topic       String @db.Text
    description String @db.Text
    user        User   @relation(fields: [userId], references: [id])

    userId        String
    subject       Subject   @relation(fields: [subjectId], references: [id])
    subjectId     String
    country       String
    academicLevel Level
    format        Format
    pages         Int
    typeOfPaper   Type
    deadline      String
    status        Status    @default(draft)
    isPaid        Boolean   @default(false)
    orderNumber   Int       @default(autoincrement())
    deleted       Boolean   @default(false)
    Files         File[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Message       Message[]
    Payment       Payment[]
}

model File {
    id      String  @id @default(cuid())
    project Project @relation(fields: [projectId], references: [id])
name String
    projectId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      fileType
}

model Message {
    id      String  @id @default(cuid())
    body    String  @db.Text
    project Project @relation(fields: [projectId], references: [id])
isRead Boolean @default(false)
    projectId String
    creator   User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    payingEmail String
    amount Decimal
}
